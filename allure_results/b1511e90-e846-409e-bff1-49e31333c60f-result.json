{"name": "Тест отображения заказа пользователя в ленте заказов и в истории заказов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_order_feed.TestsOrderFeed object at 0x000001ED9B579A00>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"179bda00-924b-4c34-bf95-cf204afe9f83\")>\nuser = {'email': 'pqztlpdcdj@yandex.ru', 'json': {'accessToken': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM...True, 'user': {'email': 'pqztlpdcdj@yandex.ru', 'name': 'pqztlpdcdj'}}, 'name': 'pqztlpdcdj', 'password': 'gdalyijkqd'}\n\n    @allure.title('Тест отображения заказа пользователя в ленте заказов и в истории заказов')\n    def test_displaying_user_order_in_order_feed(self, driver, user):\n        order_feed_page = OrderFeedPage(driver)\n        order_feed_page.transition_site(Url.LOGIN)\n        personal_account_page = PersonalAccountPage(driver)\n        personal_account_page.login_to_account(user)\n        main_functionality_page = MainFunctionalityPage(driver)\n        main_functionality_page.transferring_ingredient_constructor()\n        main_functionality_page.click_button_place_an_order()\n>       num_order = order_feed_page.get_num_order()\n\ntests\\test_order_feed.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\order_feed_page.py:19: in get_num_order\n    self.wait_for_text_not_template(OrderFeedLocators.NUM_ORDER, '9999')\npages\\base_page.py:24: in wait_for_text_not_template\n    return WebDriverWait(self.driver, time).until_not(ec.text_to_be_present_in_element(locator, template))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"179bda00-924b-4c34-bf95-cf204afe9f83\")>, method = <function text_to_be_present_in_element.<locals>._predicate at 0x000001ED9B6258A0>, message = ''\n\n    def until_not(self, method: Callable[[D], T], message: str = \"\") -> Union[T, Literal[True]]:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:128: TimeoutException"}, "steps": [{"name": "Вход в аккаунт", "status": "passed", "parameters": [{"name": "data", "value": "{'email': 'pqztlpdcdj@yandex.ru', 'name': 'pqztlpdcdj', 'password': 'gdalyijkqd', 'json': {'success': True, 'user': {'email': 'pqztlpdcdj@yandex.ru', 'name': 'pqztlpdcdj'}, 'accessToken': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1NjA0OWVkMjgwMDAxYjNjMTAxYyIsImlhdCI6MTcwOTM5NzUwOCwiZXhwIjoxNzA5Mzk4NzA4fQ.4N5_7KC_fNidrdHSON2TaJc1lCDBMivldjy_JfB9cNI', 'refreshToken': '6ede415c6eab2c008c2df7a23225b448b1c6409e174b6b7836848a4b3de17aa4c0e3bac981f40ab6'}}"}], "start": 1709397503990, "stop": 1709397504471}, {"name": "Перенос ингредиента в конструктор", "status": "passed", "start": 1709397504474, "stop": 1709397505553}, {"name": "Клик по кнопке оформить заказ", "status": "passed", "start": 1709397505553, "stop": 1709397505786}, {"name": "Получить номер заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\selez\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\selez\\PycharmProjects\\Diplom\\Diplom_3\\pages\\order_feed_page.py\", line 19, in get_num_order\n    self.wait_for_text_not_template(OrderFeedLocators.NUM_ORDER, '9999')\n  File \"C:\\Users\\selez\\PycharmProjects\\Diplom\\Diplom_3\\pages\\base_page.py\", line 24, in wait_for_text_not_template\n    return WebDriverWait(self.driver, time).until_not(ec.text_to_be_present_in_element(locator, template))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\selez\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 128, in until_not\n    raise TimeoutException(message)\n"}, "start": 1709397505786, "stop": 1709397516012}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1709397502858, "stop": 1709397516013, "uuid": "79f80043-6067-4444-a735-54ece617a34e", "historyId": "951646ca11e4db52996313e5909da852", "testCaseId": "c2fbd0078113a2c069facdf9aba1ff25", "fullName": "tests.test_order_feed.TestsOrderFeed#test_displaying_user_order_in_order_feed", "labels": [{"name": "story", "value": "Тесты ленты заказов"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestsOrderFeed"}, {"name": "host", "value": "Asus"}, {"name": "thread", "value": "18896-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}